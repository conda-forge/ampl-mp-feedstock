diff --git a/src/asl/CMakeLists.txt b/src/asl/CMakeLists.txt
index 3fde24ef..0a4714f1 100644
--- a/src/asl/CMakeLists.txt
+++ b/src/asl/CMakeLists.txt
@@ -69,20 +69,27 @@ else ()
   if (NOT WIN32)
     set(FPINIT solvers/fpinit.c)
   endif ()
-  add_executable(arithchk solvers/arithchk.c ${FPINIT})
-  if (WIN32)
-    target_compile_definitions(arithchk PRIVATE NO_FPINIT NO_SSIZE_T)
-  else ()
-    target_compile_definitions(arithchk PRIVATE ASL_NO_FPINITMT)
-    target_link_libraries(arithchk m)
-  endif ()
-  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/arith.h DEPENDS arithchk
-    COMMAND ${WINE} $<TARGET_FILE:arithchk> > arith.h COMMENT "Writing arith.h")
-  if (NOT MSVC)
-    string(REPLACE "-Wall -Wextra -pedantic" ""
-      CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
-    target_compile_options(arithchk PUBLIC -Wno-format-security)
-  endif ()
+  if (GENERATE_ARITH)
+    add_executable(arithchk solvers/arithchk.c ${FPINIT})
+    if (WIN32)
+      target_compile_definitions(arithchk PRIVATE NO_FPINIT NO_SSIZE_T)
+    else ()
+      target_compile_definitions(arithchk PRIVATE ASL_NO_FPINITMT)
+      target_link_libraries(arithchk m)
+    endif ()
+    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/arith.h DEPENDS arithchk
+      COMMAND ${WINE} $<TARGET_FILE:arithchk> > arith.h COMMENT "Writing arith.h")
+    if (NOT MSVC)
+      string(REPLACE "-Wall -Wextra -pedantic" ""
+        CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+      target_compile_options(arithchk PUBLIC -Wno-format-security)
+    endif ()
+  else()
+    add_custom_command(
+      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/arith.h
+      COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/solvers/arith.h1 ${CMAKE_CURRENT_BINARY_DIR}/arith.h
+      COMMENT "Copying arith.h1 to arith.h")
+  endif (GENERATE_ARITH)
 endif ()
 
 # Use a custom target for arith.h, because including a file generated by a
diff --git a/src/asl/arith.h1 b/src/asl/arith.h1
new file mode 100644
index 00000000..7a9856c4
--- /dev/null
+++ b/src/asl/arith.h1
@@ -0,0 +1,56 @@
+/*******************************************************************
+Copyright (C) 2019 AMPL Optimization, Inc.; written by David M. Gay.
+
+Permission to use, copy, modify, and distribute this software and its
+documentation for any purpose and without fee is hereby granted,
+provided that the above copyright notice appear in all copies and that
+both that the copyright notice and this permission notice and warranty
+disclaimer appear in supporting documentation.
+
+The author and AMPL Optimization, Inc. disclaim all warranties with
+regard to this software, including all implied warranties of
+merchantability and fitness.  In no event shall the author be liable
+for any special, indirect or consequential damages or any damages
+whatsoever resulting from loss of use, data or profits, whether in an
+action of contract, negligence or other tortious action, arising out
+of or in connection with the use or performance of this software.
+*******************************************************************/
+
+/* As an alternative to "make arith.h", on systems with compilers sufficiently */
+/* compatible with gcc or Microsoft C/C++, it may suffice to link or copy this */
+/* file to arith.h . */
+
+#ifdef _WIN64
+#define X64_bit_pointers
+#define LONG_LONG_POINTERS
+#define ssize_t long long
+#define IEEE_8087
+#elif defined(_WIN32)
+#define ssize_t long
+#define NO_LONG_LONG
+#define IEEE_8087
+#elif defined(__GNUC__)
+#if defined(__ORDER_LITTLE_ENDIAN__)
+#define IEEE_8087
+#elif defined(__ORDER_BIG_ENDIAN__)
+#define IEEE_MC68k
+#else
+Unexpected byte ordering!!!!
+#endif
+#endif
+#if __SIZEOF_POINTER__ == 8
+#define X64_bit_pointers
+#endif
+#define Double_Align
+#ifdef IEEE_8087
+#define Arith_Kind_ASL 1
+#define QNaN0 0x0
+#define QNaN1 0xfff80000
+#elif defined(IEEE_MC68k)
+#define Arith_Kind_ASL 2
+#define QNaN0 0xfff80000
+#define QNaN1 0x0
+#endif
+#ifndef Long
+#define Long int
+#endif
